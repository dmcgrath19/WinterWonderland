#version 330

in vec3 vertex_position;
in vec3 vertex_normal;
in vec2 vertex_texture;

uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;

varying vec3 normalInterp;
varying vec3 vertPos;

out vec3 FragPos;
out vec3 Normal;
out vec2 Texcoord;
out float visibility;


const float density = 0.3;
const float gradient = .6;

void main(){
 mat4 ModelViewMatrix = view * model;
mat3 NormalMatrix =  mat3(ModelViewMatrix);
  FragPos = vec3(model* vec4(vertex_position,1.0));
 //multiply normal by normal matrix incase objects are scaled/rotated
  Normal = mat3(transpose(inverse(model)))*vertex_normal;
  // Convert position to clip coordinates and pass along
  //view_vector = FragPos - view;
  vec4 positionToCam =  ModelViewMatrix * vec4(vertex_position, 1.0);
float distance = length(positionToCam.xyz);
  gl_Position = proj * view * model * vec4(vertex_position,1.0);
  Texcoord = vertex_texture;
vec4 vertPos4 = view * vec4(vertex_position, 1.0);
    vertPos = vec3(vertPos4)/vertPos4.w;
    normalInterp = NormalMatrix * vertex_normal;
visibility = exp(-pow(distance*density, gradient));

}