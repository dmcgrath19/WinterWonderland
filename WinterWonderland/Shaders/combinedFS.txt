
#version 330

in vec2 Texcoord;
in vec3 FragPos;
in vec3 Normal;
in float visibility;

struct Material {
    sampler2D textured;
    sampler2D specular;
    sampler2D normalMap;
    float shininess;
    float brightness;
    float isAlien;
};
struct Light {
    vec3 direction;
    vec3 position;
    float cutOff;
    float outerCutOff;
};

uniform Light light;
uniform Material material;
uniform vec3 viewPos;

uniform sampler2D ourTexture;

varying vec3 normalInterp;
varying vec3 vertPos;

vec3 pos = vec3(-40, 10, -30);
vec3 pos2 = vec3(20, 0, -50);
vec3 lightAmbient = vec3(0.2,0.2,0.2);
vec3 lightSpecular = vec3 (0.5,0.5, 0.5);
vec3 lightDiffuse = vec3(1,0.8,0.6);
vec3 alienSpecular = vec3(1,0.69,0.4); //gives an orange hue to the aliens specular lighting
vec3 alienAmbient = vec3(0,0,0); //keeps the alien black

float constant = .30f;
float linear = 0.14f;
float quadratic = 0.07f;

vec3 ld = vec3(10, 30, 0);
vec3 ld2 = vec3(20, 40, 20);

float c = .1f;
float c2 = .9f;
float l2 = 0.5f;
float q2 = 0.20f;

float oc = 0.7f;

const vec3 fogColor = vec3(.95, .85, .85);

void main(){
vec3 bump =  2.0 * texture(ourTexture, Texcoord).rgb - 1.0;
  vec3 normal = normalize(normalInterp + bump);
	 //ambient lighting
     vec3 lightDir = normalize(pos- FragPos);
     vec3 viewDir = normalize(viewPos - FragPos);
     vec3 ambient = lightAmbient * vec3(texture(material.textured, Texcoord));
     vec3 norm = vec3(texture(material.normalMap, Texcoord));
     if(material.isAlien > 0.0){
       norm = normalize(Normal);
     }
	   // The diffuse shading equation, dot product gives us the cosine of angle between the vectors
     norm = normalize(norm*2.0-1.0);
	   float diff = max(dot(norm,lightDir), 0.0 );
	   vec3 diffuse = lightDiffuse *diff*vec3(texture(material.textured, Texcoord));
	   //specular lighting
	   vec3 reflectDir = reflect(-lightDir, norm);
	   float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
     vec3 specular = lightSpecular* spec* vec3(texture(material.specular,Texcoord));

     //alien lighting
     if(material.isAlien > 0.0) {
       specular = lightAmbient* spec*alienSpecular;
       diffuse = alienAmbient;
       ambient = alienAmbient;
     }

     //soften edges of the flashlight
     float innerRadius = dot(lightDir, normalize(ld));
     float outerRadius = (.9f);
     float intensity = clamp((3)/outerRadius, 0.0, 1.0);
     diffuse  = diffuse*intensity;
     specular = specular;
     //attenuation
     float distance = length(pos - FragPos);
     float attenuation = 100.0 / (constant + linear * distance + quadratic * (distance * distance));
     ambient  *= attenuation;
     diffuse  *= attenuation;
     specular *= attenuation;
     vec3 result = (ambient+diffuse+specular);

   //ambient lighting
         lightDir = normalize(-pos2);
     viewDir = normalize(viewPos - FragPos);
     ambient = lightAmbient * vec3(texture(material.textured, Texcoord));
     norm = vec3(texture(material.normalMap, Texcoord));
     
	   // The diffuse shading equation, dot product gives us the cosine of angle between the vectors
     norm = normalize(norm*2.0-1.0);
	   diff = max(dot(norm,lightDir), 0.0 );
	   diffuse = lightDiffuse *diff*vec3(texture(material.textured, Texcoord));
	   //specular lighting
	   reflectDir = reflect(-lightDir, norm);
	   spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
     specular = lightSpecular* spec* vec3(texture(material.specular,Texcoord));


     //soften edges of the flashlight
     innerRadius = dot(lightDir, normalize(ld2));
     outerRadius = (light.cutOff - light.outerCutOff);
     intensity = clamp((innerRadius - light.outerCutOff)/outerRadius, 0.0, 1.0);
     diffuse  = diffuse*intensity;
     specular = specular*intensity;
     //attenuation
     distance = length(pos2 - FragPos);
 
     attenuation = 175.0 / (constant + linear * distance + quadratic * (distance * distance));
     ambient  *= attenuation;
     diffuse  *= attenuation;
     specular *= attenuation;

     result += (ambient + diffuse + specular);
     

    //combine to phong lighting
	  vec4 color = texture(ourTexture, Texcoord) * vec4(result, 1.0);
  gl_FragColor =  mix(vec4(fogColor ,1.0), color, visibility);
}